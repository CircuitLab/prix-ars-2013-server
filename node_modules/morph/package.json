{
  "name": "morph",
  "version": "0.1.0",
  "description": "Lightweight string transformations",
  "main": "lib/morph.js",
  "scripts": {
    "prepublish": "cake build",
    "test": "cake test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cmoncrief/morph.git"
  },
  "keywords": [
    "string",
    "transform",
    "camelcase",
    "snakecase",
    "camelize",
    "underscore",
    "dasherize",
    "titleize",
    "case"
  ],
  "author": {
    "name": "Charles Moncrief"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.8.1",
    "coffee-script": "~1.4.0"
  },
  "engines": {
    "node": "*"
  },
  "readme": "# Morph\n\nMorph is a lightweight collection of string transformations useful for converting between variable\nnaming styles. It can operate on a single string or convert all of an object's keys to the new style.\n\n## Installation\n\nInstall via npm:\n\n    $ npm install morph\n\n## Usage\n\n    var morph = require('morph')\n\n    morph.toSnake('loremIpsumDolor')         // => 'lorem_ipsum_dolor'\n    morph.toSnakeCaps('loremIpsumDolor')     // => 'LOREM_IPSUM_DOLOR'\n    morph.toCamel('lorem_ipsum_dolor')       // => 'loremIpsumDolor'\n    morph.toUpperCamel('lorem_ipsum_dolor')  // => 'LoremIpsumDolor'\n    morph.toDashed('lorem_ipsum_dolor')      // => 'lorem-ipsum-dolor'\n    morph.toHuman('lorem_ipsum_dolor')       // => 'Lorem ipsum dolor'\n    morph.toTitle('lorem_ipsum_dolor')       // => 'Lorem Ipsum Dolor'\n\n    // Convert an object's keys\n    var obj = {loremIpsum: 'test', dolorSit: 'test'}\n    morph.toSnake(obj)                       // => {lorem_ipsum: 'test', dolor_sit: 'test'}\n\n## Snake case\n\n#### toSnake(input, [capFirst])\n\nConverts the input string or hash to snake case. Set `capFirst` to true to capitalize\nthe first letter of the output string.\n\n    morph.toSnake('loremIpsumDolor')        // => 'lorem_ipsum_dolor'\n    morph.toSnake('LOREM_IPSUM_DOLOR')      // => 'lorem_ipsum_dolor'\n    morph.toSnake('lorem-Ipsum.Dolor')      // => 'lorem_ipsum_dolor'\n\n## Caps snake case\n\n#### toSnakeCaps(input)\n\nConverts the input string or hash to caps snake case. \n\n    morph.toSnakeCaps('loremIpsumDolor')        // => 'LOREM_IPSUM_DOLOR'\n    morph.toSnakeCaps('lorem_ipsum_dolor')      // => 'LOREM_IPSUM_DOLOR'\n    morph.toSnakeCaps('lorem-Ipsum.Dolor')      // => 'LOREM_IPSUM_DOLOR'\n\n## Camel case\n\n#### toCamel(input, [capFirst])\n#### toUpperCamel(input, [capFirst])\n\nConverts the input string or hash to caps snake case. Set `capFirst` to true to \ncapitalize the first letter of the string, or use the aliased **toUpperCamel**\nfunction.\n\n    morph.toCamel('lorem_ipsum_dolor')          // => 'loremIpsumDolor'\n    morph.toCamel('lorem-Ipsum.dolor')          // => 'loremIpsumDolor'\n    morph.toUpperCamel('LOREM_IPSUM_DOLOR')     // => 'LoremIpsumDolor'\n\n## Dashed\n\n#### toDashed(input, [capFirst])\n\nConverts the input string or hash to human readable format. Set `capFirst` to true\nto capitalize the first letter of the output string.\n\n    morph.toDashed('loremIpsumDolor')        // => 'lorem-ipsum-dolor'\n    morph.toDashed('LOREM_IPSUM_DOLOR')      // => 'lorem-ipsum-dolor'\n    morph.toDashed('lorem-Ipsum.Dolor')      // => 'lorem-ipsum-dolor'\n\n## Human format\n\n#### toHuman(input, [capFirst])\n\nConverts the input string or hash to human readable format. Set `capFirst` to false\nto leave the first letter of the string lowercase.\n\n    morph.toHuman('lorem_ipsum_dolor')         // => 'Lorem ipsum dolor'\n    morph.toHuman('loremIpsumDolor')           // => 'Lorem ipsum dolor'\n    morph.toHuman('LOREM_IPSUM_DOLOR', false)  // => 'lorem ipsum dolor'\n\n## Title format\n\n#### toTitle(input)\n\nConverts the input string or hash to title format. \n\n    morph.toTitle('lorem_ipsum_dolor')         // => 'Lorem Ipsum Dolor'\n    morph.toTitle('loremIpsumDolor')           // => 'Lorem Ipsum Dolor'\n    morph.toTitle('LOREM_IPSUM_DOLOR')         // => 'Lorem Ipsum Dolor'\n\n## Converting objects\n\nTo convert an object's keys to a new style, pass in an object as input. Note\nthat **all** keys will be converted.\n\n    var obj = {some_key: 123, another_key: 456}\n    morph.toCamel(obj)                         // => {someKey: 123, anotherKey: 456}\n\n## Running the tests\n\nTo run the test suite, invoke the following commands in the repository:\n\n    $ npm install\n    $ npm test\n",
  "readmeFilename": "README.md",
  "_id": "morph@0.1.0",
  "dist": {
    "shasum": "8a8c88742c2e5caeb330bf88883643614cada177"
  },
  "_from": "morph@~0.1.0",
  "_resolved": "https://registry.npmjs.org/morph/-/morph-0.1.0.tgz"
}
